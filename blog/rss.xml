<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Misti Blog</title>
        <link>https://nowarp.io/blog</link>
        <description>Misti Blog</description>
        <lastBuildDate>Sun, 26 Jan 2025 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[TON Security Risks: A Static Analysis Perspective]]></title>
            <link>https://nowarp.io/blog/ton-security-risks</link>
            <guid>https://nowarp.io/blog/ton-security-risks</guid>
            <pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate>
            <description><![CDATA[Smart contracts are unforgiving. A single bug can vaporize millions of dollars. If you're coming from web development, forget everything you know about "move fast and break things" - here, breaking things means actually breaking things. With money. Real money.]]></description>
            <content:encoded><![CDATA[<p>Smart contracts are unforgiving. A single bug can vaporize millions of dollars. If you're coming from web development, forget everything you know about "move fast and break things" - here, breaking things means <em>actually breaking things</em>. With money. Real money.</p>
<p>This is where static analysis comes in. It's a technique that examines your code before deployment to automatically detect potential vulnerabilities. While no automated tool can guarantee security, static analysis can identify common pitfalls early in development.</p>
<p>This post:</p>
<ul>
<li>Explores static analysis capabilities and limitations for smart contracts security.</li>
<li>Shows how this fits into <a href="https://ton.org/" target="_blank" rel="noopener noreferrer">TON</a> security landscape through <a href="https://nowarp.io/tools/misti/" target="_blank" rel="noopener noreferrer">Misti</a>.</li>
</ul>
<p>Understanding static program analysis enables you to add an additional layer of automated security verification to your development process, catching some vulnerabilities before they reach production.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="static-analysis-for-web3-and-ton">Static Analysis for Web3 and TON<a class="hash-link" aria-label="Direct link to Static Analysis for Web3 and TON" title="Direct link to Static Analysis for Web3 and TON" href="https://nowarp.io/blog/ton-security-risks#static-analysis-for-web3-and-ton">​</a></h2>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="static-program-analysis-101">Static Program Analysis 101<a class="hash-link" aria-label="Direct link to Static Program Analysis 101" title="Direct link to Static Program Analysis 101" href="https://nowarp.io/blog/ton-security-risks#static-program-analysis-101">​</a></h3>
<p>Security tooling is an essential part of modern smart contract development, serving as the first line of defense against vulnerabilities. While manual code review remains crucial, automated analysis tools can systematically identify classes of bugs that would be tedious and error-prone to catch by hand.</p>
<p>Static program analysis examines code without executing it. The classic approach used in program analysis and compiler design is the Monotone Framework <a href="https://nowarp.io/blog/ton-security-risks#references">[4]</a>. This builds abstract models of your program using <a href="https://en.wikipedia.org/wiki/Control-flow_graph" target="_blank" rel="noopener noreferrer">control flow graphs</a> (CFGs) and <a href="https://en.wikipedia.org/wiki/Data-flow_analysis" target="_blank" rel="noopener noreferrer">data flow analysis</a> to reason about program behavior without the undecidability of analyzing all possible runtime scenarios.</p>
<p>The analysis pipeline could be illustrated like this:</p>
<div align="center"><img src="https://nowarp.io/assets/images/2025-01-26-pipeline-6204d425768116cef91972258563e1d2.png"></div>
<p>In essence, the approach is straightforward: we read and analyze the code structure to identify potential security vulnerabilities, without executing the code itself.</p>
<p>There are also different analysis techniques that exist, which can be used to <a href="https://en.wikipedia.org/wiki/Symbolic_execution" target="_blank" rel="noopener noreferrer">explore concrete paths of execution</a>, <a href="https://en.wikipedia.org/wiki/Model_checking#Symbolic_model_checking" target="_blank" rel="noopener noreferrer">prove properties on a limited domain of program</a>, <a href="https://en.wikipedia.org/wiki/Abstract_interpretation" target="_blank" rel="noopener noreferrer">prove program properties with more accuracy</a>, and so on, but the core issue is always the same: <a href="https://en.wikipedia.org/wiki/Rice%27s_theorem" target="_blank" rel="noopener noreferrer">static undecidability</a>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="application-to-ton-smart-contracts">Application to TON Smart Contracts<a class="hash-link" aria-label="Direct link to Application to TON Smart Contracts" title="Direct link to Application to TON Smart Contracts" href="https://nowarp.io/blog/ton-security-risks#application-to-ton-smart-contracts">​</a></h3>
<p>Smart contracts are just programs executing in blockchain. They have some differences, but fundamentally the same techniques of classic program analysis can be applied to smart contract analysis.</p>
<p>Being a dynamic field, web3 security is currently actively developing, new approaches are being tested, but still, that's a wild west: tools' impact on actual bug finding is suboptimal <a href="https://nowarp.io/blog/ton-security-risks#references">[1]</a>. Despite that, we have a huge set of approaches described in papers and applied in commercial/free tools, we know about past bugs typical for other blockchains, and this knowledge can be extrapolated to TON.</p>
<p>TON creates its own unique architectural issues, while most of the generic web3 bugs from research and practical experience are still valid for TON. It has a runtime environment based on a stack machine and a couple of imperative languages without advanced language design solutions, which makes it quite similar to existing blockchain environments.</p>
<p>Examples of common security and functionality issues present in TON contracts include <a href="https://nowarp.io/blog/ton-security-risks#references">[2]</a>:</p>
<div align="center"><img src="https://nowarp.io/assets/images/2025-01-26-web3-bugs-779ce142d570a47396f08249eff24cda.png"></div>
<p>But the most complicated bugs in TON are related to its unique actor model and asynchronous message-passing <a href="https://nowarp.io/blog/ton-security-risks#references">[3]</a>:</p>
<ul>
<li>Partial execution: state mutations due to asynchronous message passing</li>
<li>Man in the middle in message flow</li>
<li><em>Anything</em> that requires understanding the specification of the system; thus requiring a manual audit</li>
</ul>
<p>Here's the key point: complex bugs require understanding the system, and sometimes even developers don't fully understand it.</p>
<div class="spoilerContainer_ujGA"><div class="spoilerLine_Q5Qv">&gt; <!-- -->Show spoiler</div></div>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="misti-ton-static-analyzer">Misti: TON Static Analyzer<a class="hash-link" aria-label="Direct link to Misti: TON Static Analyzer" title="Direct link to Misti: TON Static Analyzer" href="https://nowarp.io/blog/ton-security-risks#misti-ton-static-analyzer">​</a></h2>
<p><a href="https://nowarp.io/tools/misti" target="_blank" rel="noopener noreferrer">Misti</a> as a source-level analyzer for <a href="https://tact-lang.org/" target="_blank" rel="noopener noreferrer">Tact</a> contracts based on monotone framework that works exactly as described above, as well as combining it with <a href="https://nowarp.io/tools/misti/docs/next/hacking/souffle" target="_blank" rel="noopener noreferrer">Datalog-based analyses</a>. Certainly it has all the limitations typical for this approach. These are essential and done by design.</p>
<p>Misti covers different categories of <a href="https://nowarp.io/tools/misti/docs/next/detectors" target="_blank" rel="noopener noreferrer">security and optimization issues</a>:</p>
<ul>
<li>Cell storage issues</li>
<li>Resource exhaustion vectors potentially leading to <a href="https://en.wikipedia.org/wiki/Denial-of-service_attack" target="_blank" rel="noopener noreferrer">DoS</a></li>
<li>Arithmetic issues</li>
<li>Unauthorized access to critical functions and contract's state</li>
<li>Code optimization</li>
<li>Generic suspicious patterns<!-- -->:things<!-- --> we learn from web3 security in past</li>
</ul>
<p>Let's consider some concrete case studies of analyses Misti implements for both generic smart contract issues and TON/Tact-specific problems.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="cell-storage-issues">Cell storage issues<a class="hash-link" aria-label="Direct link to Cell storage issues" title="Direct link to Cell storage issues" href="https://nowarp.io/blog/ton-security-risks#cell-storage-issues">​</a></h3>
<p>TON <a href="https://docs.ton.org/v3/concepts/dive-into-ton/ton-blockchain/cells-as-data-storage" target="_blank" rel="noopener noreferrer">stores</a> persistent data in <code>Cell</code> structures. Cell is a low-level primitive containing up to <code>1023</code> bytes of data and up to <code>4</code> references to other cells used to create high-level data structures.</p>
<p>The possible issue with cells arises when access or write operation disrupts these limits. When the user tries either to load non-existing data from a cell or write data/references beyond the specified limits, it leads to <code>CellUnderflow</code> and <code>CellOverflow</code> <a href="https://docs.ton.org/v3/documentation/tvm/tvm-exit-codes#standard-exit-codes" target="_blank" rel="noopener noreferrer">compute phase exceptions</a>:</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">b1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">beginCell</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token variable" style="color:#36acaa">b1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">b1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">storeInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">257</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token variable" style="color:#36acaa">b1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">b1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">storeInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">balance</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">257</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token variable" style="color:#36acaa">b1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">b1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">storeInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">owner_data</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">257</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// CellOverflow: storing more than 1023 bits</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token variable" style="color:#36acaa">b1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">b1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">storeInt</span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">msg</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">info</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">257</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">s1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">beginCell</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Creating a Slice with 1 reference</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">storeRef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">c</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">endCell</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">           </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">asSlice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">ref1</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">s1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">loadRef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// OK</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">ref2</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">s1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">loadRef</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// CellUnderflow</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>Because of the asynchronous nature of TON, these issues may lead to unexpected message flow disrupting the logic of the contract.</p>
<p>The main issue of detecting these is that in Tact, Cell operations might be used within different data structures like Builder, Slice, Cell, Struct and Message, and might require reasoning about the source code within different function/method calls.</p>
<p>The <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/CellBounds/" target="_blank" rel="noopener noreferrer">CellBounds</a></b> detector tries to handle this by statically inspecting the source code.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="tact-specific-issues">Tact-specific issues<a class="hash-link" aria-label="Direct link to Tact-specific issues" title="Direct link to Tact-specific issues" href="https://nowarp.io/blog/ton-security-risks#tact-specific-issues">​</a></h3>
<p>There are plenty of Tact-specific issues covered by Misti. Let's consider some of them with source code examples.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="function-arguments-in-tact-are-immutable">Function arguments in Tact are immutable<a class="hash-link" aria-label="Direct link to Function arguments in Tact are immutable" title="Direct link to Function arguments in Tact are immutable" href="https://nowarp.io/blog/ton-security-risks#function-arguments-in-tact-are-immutable">​</a></h4>
<p>Thus, the developer should not mutate them expecting they'll be changed in the callsite. The <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/ArgCopyMutation/" target="_blank" rel="noopener noreferrer">ArgCopyMutation</a></b> detector finds these cases (unless the developer explicitly returns the modified parameter):</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">fun</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">setA</span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">Int</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">m</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token generics builtin">map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics builtin">Int</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics builtin">Int</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Bad: `m` won't be modified in the callsite</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token variable" style="color:#36acaa">m</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">set</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">key</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">a</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="some-exit-codes-are-reserved">Some exit codes are reserved<a class="hash-link" aria-label="Direct link to Some exit codes are reserved" title="Direct link to Some exit codes are reserved" href="https://nowarp.io/blog/ton-security-risks#some-exit-codes-are-reserved">​</a></h4>
<p>Codes from 0 to 255 <a href="https://docs.tact-lang.org/book/exit-codes/" target="_blank" rel="noopener noreferrer">are reserved</a> by Tact and TON. Thus, the developer should never use them to avoid breaking the expected behavior of the contract. The <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/ExitCodeUsage/" target="_blank" rel="noopener noreferrer">ExitCodeUsage</a></b> detector interprets the possible numeric values used in exit codes in order to detect suspicious cases like these:</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Bad: Throwing the reserved `128` code</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">nativeThrowUnless</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">128</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">sender</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">owner</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="dont-overlap-string-receivers-values">Don't overlap string receivers values<a class="hash-link" aria-label="Direct link to Don't overlap string receivers values" title="Direct link to Don't overlap string receivers values" href="https://nowarp.io/blog/ton-security-risks#dont-overlap-string-receivers-values">​</a></h4>
<p>Tact has <a href="https://docs.tact-lang.org/book/receive/" target="_blank" rel="noopener noreferrer">text receivers</a> which accept a particular string as a message. The issue arises when a generic receiver (defined <code>receive()</code>) handles these messages:</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">contract</span><span class="token plain"> </span><span class="token class-name">Test</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">msg</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">String</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Bad: "test" message should be handles in `receive("test")`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">msg</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*...*/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>This leads to unexpected control flow making some receivers unreachable. The <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/StringReceiversOverlap/" target="_blank" rel="noopener noreferrer">StringReceiversOverlap</a></b> detector handles this.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="choose-better-tact-api">Choose better Tact API<a class="hash-link" aria-label="Direct link to Choose better Tact API" title="Direct link to Choose better Tact API" href="https://nowarp.io/blog/ton-security-risks#choose-better-tact-api">​</a></h4>
<p>Tact, being a dynamically developed language, can introduce new features making code more effective or deprecate some features or create safer alternatives or potentially dangerous functions.</p>
<p>Examples of these functions include but are not limited to:</p>
<ol>
<li><a href="https://docs.tact-lang.org/ref/core-advanced#nativesendmessage" target="_blank" rel="noopener noreferrer"><code>nativeSendMessage</code></a> should be replaced with <a href="https://docs.tact-lang.org/book/send/" target="_blank" rel="noopener noreferrer"><code>send</code></a></li>
<li><a href="https://docs.tact-lang.org/ref/core-advanced/#nativerandom" target="_blank" rel="noopener noreferrer"><code>nativeRandom</code></a> should be replaced with <a href="https://docs.tact-lang.org/ref/core-random/#randomint" target="_blank" rel="noopener noreferrer"><code>randomInt</code></a></li>
<li>Tact provides optimized versions of <code>send</code>: <a href="https://docs.tact-lang.org/ref/core-common/#deploy" target="_blank" rel="noopener noreferrer"><code>deploy</code></a> and <a href="https://docs.tact-lang.org/ref/core-common/#message" target="_blank" rel="noopener noreferrer"><code>message</code></a></li>
</ol>
<p>Here is some illustrating code:</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">contract</span><span class="token plain"> </span><span class="token class-name">Test</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Bad: Prefer more effective `deploy` function</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">init</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">initOf</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">A</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">SendParameters</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">code</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">init</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">code</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/* ... */</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token comment" style="color:#999988;font-style:italic">// Bad: Prefer `emptySlice()`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">s</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">Slice</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">emptyCell</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">asSlice</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>It might be not-so-easy to follow all the updates within different versions of the Tact compiler; thus Misti covers this. Examples of detectors of this category include <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/PreferredStdlibApi/" target="_blank" rel="noopener noreferrer">PreferredStdlibApi</a></b> and <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/SuboptimalSend/" target="_blank" rel="noopener noreferrer">SuboptimalSend</a></b>.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="arithmetic-issues">Arithmetic issues<a class="hash-link" aria-label="Direct link to Arithmetic issues" title="Direct link to Arithmetic issues" href="https://nowarp.io/blog/ton-security-risks#arithmetic-issues">​</a></h3>
<p>A classic arithmetic issue typical for smart contracts is division before multiplication. The thing is that typically the division operation can leave some remainder that might be missed when using multiplication afterward. If there is no handling of the remainder, the contract might lose user funds or tokens on such operations:</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">a</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">Int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">10</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">b</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">Int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">c</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">Int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic">// Bad: Division before multiplication</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">result</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">Int</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">a</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">/</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">b</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">*</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">c</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/DivideBeforeMultiply/" target="_blank" rel="noopener noreferrer">DivideBeforeMultiply</a></b> detector can detect these cases.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="use-random-properly">Use random properly<a class="hash-link" aria-label="Direct link to Use random properly" title="Direct link to Use random properly" href="https://nowarp.io/blog/ton-security-risks#use-random-properly">​</a></h4>
<p>TVM implements some <a href="https://docs.ton.org/v3/guidelines/smart-contracts/security/random-number-generation" target="_blank" rel="noopener noreferrer">PRG functionality</a>. When using it in Tact, the developer should care about API usage and read the documentation carefully. They always have to initialize seed correctly using either the Tact standard library <a href="https://docs.tact-lang.org/ref/core-advanced/#nativepreparerandom" target="_blank" rel="noopener noreferrer"><code>nativePrepareRandom</code></a> or some TVM assembly to initialize the seed. <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/EnsurePrgSeed/" target="_blank" rel="noopener noreferrer">EnsurePrgSeed</a></b> ensures the random seed is set up before accessing randomness features.</p>
<div class="spoilerContainer_ujGA"><div class="spoilerLine_Q5Qv">&gt; <!-- -->Show spoiler</div></div>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="unprotected-calls-or-state-changes">Unprotected calls or state changes<a class="hash-link" aria-label="Direct link to Unprotected calls or state changes" title="Direct link to Unprotected calls or state changes" href="https://nowarp.io/blog/ton-security-risks#unprotected-calls-or-state-changes">​</a></h3>
<p>In smart contracts there are always privileged functions which e.g. destroy contract, send funds, and it is possible to change critical parameters through sending messages. All this functionality essentially should be protected from random users to avoid cases like <a href="https://blog.openzeppelin.com/on-the-parity-wallet-multisig-hack-405a8c12e8f7" target="_blank" rel="noopener noreferrer">The Parity Wallet Hack</a>.</p>
<p>Here is some code illustrating this for Tact:</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">receive</span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">s1</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token builtin">Slice</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">let</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">a</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">s1</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">loadAddress</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Bad: Anyone could send funds to an arbitrary address</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// The protection would be to `require` a specific sender address</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">SendParameters</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">to</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">/*...*/</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/UnprotectedCall/" target="_blank" rel="noopener noreferrer">UnprotectedCall</a></b> detector can protect your code against such cases.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="generic-code-issues">Generic code issues<a class="hash-link" aria-label="Direct link to Generic code issues" title="Direct link to Generic code issues" href="https://nowarp.io/blog/ton-security-risks#generic-code-issues">​</a></h3>
<p>There are plenty of issues typical not only for smart contracts but for normal programs as well. But while using these issues in <em>not safety-critical systems</em> typically doesn't lead to severe damage, in contracts the results might be much worse. Let's consider some case studies:</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="be-careful-with-copy-paste">Be careful with copy-paste<a class="hash-link" aria-label="Direct link to Be careful with copy-paste" title="Direct link to Be careful with copy-paste" href="https://nowarp.io/blog/ton-security-risks#be-careful-with-copy-paste">​</a></h4>
<p>A typical case is when you need slightly different logic that makes no sense to parametrize to avoid overcomplicating your code. But you should be careful there, not forgetting to update all the branches after copy-pasting and later when refactoring your code:</p>
<div class="language-tact codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tact codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">lockPeriod</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">HALF_YEAR</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">sender</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">owner</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"Only owner can trade"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic">// Bad: The developer forgot to update the copy-pasted branch</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">require</span><span class="token punctuation" style="color:#393A34">(</span><span class="token variable" style="color:#36acaa">sender</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">self</span><span class="token punctuation" style="color:#393A34">.</span><span class="token variable" style="color:#36acaa">owner</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"Only owner can trade"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div>
<p>The <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/BranchDuplicate/" target="_blank" rel="noopener noreferrer">BranchDuplicate</a></b> detector can find equal branches in code.</p>
<h4 class="anchor anchorWithStickyNavbar_LWe7" id="get-rid-of-dead-code">Get rid of dead code<a class="hash-link" aria-label="Direct link to Get rid of dead code" title="Direct link to Get rid of dead code" href="https://nowarp.io/blog/ton-security-risks#get-rid-of-dead-code">​</a></h4>
<p>Dead code is not as simple as it sounds. It not only clutters your codebase but often indicates that the developer:</p>
<ul>
<li>Forgot to implement the intended logic (e.g. unused constant or write-only field)</li>
<li>Didn't check the error returning from the function (can lead to control flow anomalies, search for: <code>weird ERC20 attack</code> and read <a href="https://nowarp.io/blog/ton-security-risks#references">[5]</a> for more)</li>
</ul>
<p>Examples of dead code detectors in Misti are: <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/NeverAccessedVariables/" target="_blank" rel="noopener noreferrer">NeverAccessedVariables</a></b>, <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/ReadOnlyVariables/" target="_blank" rel="noopener noreferrer">ReadOnlyVariables</a></b>, <b><a href="https://nowarp.io/tools/misti/docs/next/detectors/UnusedExpressionResult/" target="_blank" rel="noopener noreferrer">UnusedExpressionResult</a></b>.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" aria-label="Direct link to Conclusion" title="Direct link to Conclusion" href="https://nowarp.io/blog/ton-security-risks#conclusion">​</a></h2>
<p>We've considered the basic information about static program analysis and it's application to the TON security landscape. Now, here are some concrete steps to increase security you should be thinking about.</p>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="increase-security-of-your-project">Increase security of your project<a class="hash-link" aria-label="Direct link to Increase security of your project" title="Direct link to Increase security of your project" href="https://nowarp.io/blog/ton-security-risks#increase-security-of-your-project">​</a></h3>
<ul>
<li><strong>Integrate security tools:</strong> Use every possibility to make your code secure. Static analysis is a good as a first line of defense, catching common vulnerabilities early and automatically. Add Misti to your <a href="https://nowarp.io/tools/misti/docs/tutorial/ci-cd" target="_blank" rel="noopener noreferrer">CI/CD</a> and integrate it <a href="https://t.me/nowarp_io/4" target="_blank" rel="noopener noreferrer">in the development process</a>.</li>
<li><strong>Apply development practices:</strong> testing, design, formal specification or at least documentation. This develops a separate post and might be highlighted in this blog later. Prefer <a href="https://tact-lang.org/" target="_blank" rel="noopener noreferrer">a safe language</a>.</li>
<li><strong>Set up processes:</strong> Security not only about analysis and audits: you should think in advance about security development in incident response processes.</li>
<li><strong>Do security audit:</strong> While static analysis enhances the security process, it cannot replace thorough manual audits. For production contracts, professional security audits remain essential. You could find our contacts on <a href="https://nowarp.io/" target="_blank" rel="noopener noreferrer">nowarp.io</a> or browse security teams collaborating with TF.</li>
</ul>
<h3 class="anchor anchorWithStickyNavbar_LWe7" id="future-directions-in-misti">Future Directions in Misti<a class="hash-link" aria-label="Direct link to Future Directions in Misti" title="Direct link to Future Directions in Misti" href="https://nowarp.io/blog/ton-security-risks#future-directions-in-misti">​</a></h3>
<p>There are many possibilities in TON security automation. Our concrete steps in Misti for the next months:</p>
<ul>
<li>Implementing <a href="https://github.com/nowarp/misti/issues/254" target="_blank" rel="noopener noreferrer">IFDS with path-sensitivity tracking</a> in order to improve accuracy of interprocedural taint analysis</li>
<li>Implement more Tact detectors using advanced static analysis techniques. The concrete roadmap will be available in the <a href="https://github.com/nowarp/misti/milestones" target="_blank" rel="noopener noreferrer">GitHub milestones</a>.</li>
<li>Improve integrability and API to support third-party developers</li>
<li>Provide better tooling for auditors to actually understand the structure of contracts</li>
</ul>
<p>Overall, Misti still following the development of the Tact language and improves it support to make development on it more smooth and secure.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="references">References<a class="hash-link" aria-label="Direct link to References" title="Direct link to References" href="https://nowarp.io/blog/ton-security-risks#references">​</a></h2>
<ol>
<li><a href="https://yanniss.github.io/symvalic-oopsla21.pdf" target="_blank" rel="noopener noreferrer">Smaragdakis et al. – Symbolic Value Analysis for Smart Contracts</a></li>
<li><a href="https://github.com/ZhangZhuoSJTU/Web3Bugs/blob/main/papers/icse23.pdf" target="_blank" rel="noopener noreferrer">Zhang et al. - Demystifying Exploitable Bugs in Smart Contracts</a></li>
<li><a href="https://docs.ton.org/v3/guidelines/smart-contracts/security/secure-programming" target="_blank" rel="noopener noreferrer">TON Documentation: Secure Smart Contract Programming</a></li>
<li><a href="https://cs.au.dk/~amoeller/spa/spa.pdf" target="_blank" rel="noopener noreferrer">Anders Møller and Michael I. Schwartzbach – Static Program Analysis</a></li>
<li><a href="https://dl.acm.org/doi/10.1145/3605768.3623546" target="_blank" rel="noopener noreferrer">Gan et al. – Why Trick Me: The Honeypot Traps on Decentralized Exchanges</a></li>
</ol>]]></content:encoded>
            <category>misti</category>
            <category>ton</category>
            <category>static analysis</category>
        </item>
    </channel>
</rss>