"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[2448],{7547:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var r=n(4848),i=n(8453);const s={},o="StateMutationInGetter",a={id:"detectors/StateMutationInGetter",title:"StateMutationInGetter",description:"Severity Security",source:"@site/docs/detectors/StateMutationInGetter.md",sourceDirName:"detectors",slug:"/detectors/StateMutationInGetter",permalink:"/tools/misti/docs/next/detectors/StateMutationInGetter",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/docs/detectors/StateMutationInGetter.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"ShortCircuitCondition",permalink:"/tools/misti/docs/next/detectors/ShortCircuitCondition"},next:{title:"StringReceiversOverlap",permalink:"/tools/misti/docs/next/detectors/StringReceiversOverlap"}},c={},l=[{value:"Why is it important?",id:"why-is-it-important",level:2},{value:"Example",id:"example",level:2}];function u(t){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...t.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"statemutationingetter",children:"StateMutationInGetter"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Severity"}),": Info | ",(0,r.jsx)(e.strong,{children:"Category"}),": Security"]}),"\n",(0,r.jsx)(e.p,{children:"An optional detector that identifies cases where a state-mutating function is called within a getter method."}),"\n",(0,r.jsx)(e.h2,{id:"why-is-it-important",children:"Why is it important?"}),"\n",(0,r.jsx)(e.p,{children:"While getter methods are generally expected to be pure functions that don\u2019t modify state,\nthey sometimes contain state-modifying logic (directly or indirectly). This can lead to\nmisunderstandings for developers who assume getters are read-only. This detector is intended\nfor auditors to highlight such cases as potential design concerns."}),"\n",(0,r.jsx)(e.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tact",children:"contract Example {\n  value: Int = 0;\n\n  get fun getValue(): Int {\n    self.updateCounter(); // Suspicious: calls a function that modifies state\n    return self.value;\n  }\n\n  fun updateCounter() {\n    self.value = self.value + 1; // Modifies state\n  }\n}\n"})}),"\n",(0,r.jsx)(e.p,{children:"Use instead:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tact",children:"contract Example {\n  value: Int = 0;\n  get fun getValue(): Int {\n    return self.value; // OK: Pure getter\n  }\n\n  fun getAndIncrement(): Int {\n    let current = self.value;\n    self.value = self.value + 1;\n    return current;\n  }\n}\n"})})]})}function d(t={}){const{wrapper:e}={...(0,i.R)(),...t.components};return e?(0,r.jsx)(e,{...t,children:(0,r.jsx)(u,{...t})}):u(t)}},8453:(t,e,n)=>{n.d(e,{R:()=>o,x:()=>a});var r=n(6540);const i={},s=r.createContext(i);function o(t){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function a(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(i):t.components||i:o(t.components),r.createElement(s.Provider,{value:e},t.children)}}}]);