"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[138],{6375:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>a});var r=n(4848),d=n(8453);const i={},s="PreferredStdlibApi",o={id:"detectors/PreferredStdlibApi",title:"PreferredStdlibApi",description:"An optional detector that flags the use of advanced functions from the standard library.",source:"@site/versioned_docs/version-0.7/detectors/PreferredStdlibApi.md",sourceDirName:"detectors",slug:"/detectors/PreferredStdlibApi",permalink:"/tools/misti/docs/0.7/detectors/PreferredStdlibApi",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.7/detectors/PreferredStdlibApi.md",tags:[],version:"0.7",frontMatter:{},sidebar:"sidebar",previous:{title:"PreferAugmentedAssign",permalink:"/tools/misti/docs/0.7/detectors/PreferAugmentedAssign"},next:{title:"ReadOnlyVariables",permalink:"/tools/misti/docs/0.7/detectors/ReadOnlyVariables"}},l={},a=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"preferredstdlibapi",children:"PreferredStdlibApi"}),"\n",(0,r.jsx)(t.p,{children:"An optional detector that flags the use of advanced functions from the standard library."}),"\n",(0,r.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,r.jsx)(t.p,{children:"Auditors should pay extra attention to these functions, as incorrect usage can\nlead to subtle bugs. Safer stdlib alternatives should be preferred in the code."}),"\n",(0,r.jsx)(t.p,{children:"Supported functions:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Use ",(0,r.jsx)(t.code,{children:"send"})," instead of ",(0,r.jsx)(t.a,{href:"https://docs.tact-lang.org/ref/core-advanced#nativesendmessage",children:(0,r.jsx)(t.code,{children:"nativeSendMessage"})})]}),"\n",(0,r.jsxs)(t.li,{children:["Prefer ",(0,r.jsx)(t.code,{children:"randomInt"})," instead of ",(0,r.jsx)(t.a,{href:"https://docs.tact-lang.org/ref/core-advanced#nativerandom",children:(0,r.jsx)(t.code,{children:"nativeRandom"})})]}),"\n",(0,r.jsxs)(t.li,{children:["Replace ",(0,r.jsx)(t.code,{children:"emptyCell().asSlice()"})," with ",(0,r.jsx)(t.code,{children:"emptySlice()"})]}),"\n",(0,r.jsxs)(t.li,{children:["Replace ",(0,r.jsx)(t.code,{children:"beginCell().endCell()"})," with ",(0,r.jsx)(t.code,{children:"emptyCell()"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tact",children:"let pkg: Slice = msg.transfer;\nlet _seqno: Int = pkg.loadInt(32);\nlet mode: Int = pkg.loadInt(8);\nlet body: Cell = pkg.loadRef();\n// Bad: prefer `send` to avoid low-level manipulation of Slice\nnativeSendMessage(body, mode);\n"})}),"\n",(0,r.jsx)(t.p,{children:"Use instead:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tact",children:"// Safer: More explicit definition of the send operation\nsend(SendParameters{ value: amount,\n                     to: self.owner,\n                     mode: mode,\n                     body: beginCell().endCell() });\n"})})]})}function p(e={}){const{wrapper:t}={...(0,d.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var r=n(6540);const d={},i=r.createContext(d);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);