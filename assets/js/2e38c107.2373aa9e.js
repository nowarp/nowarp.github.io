"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[7742],{9163:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var n=r(4848),i=r(8453);const s={},o="StringReceiversOverlap",c={id:"detectors/StringReceiversOverlap",title:"StringReceiversOverlap",description:"Severity Security",source:"@site/versioned_docs/version-0.8/detectors/StringReceiversOverlap.md",sourceDirName:"detectors",slug:"/detectors/StringReceiversOverlap",permalink:"/tools/misti/docs/0.8/detectors/StringReceiversOverlap",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.8/detectors/StringReceiversOverlap.md",tags:[],version:"0.8",frontMatter:{},sidebar:"sidebar",previous:{title:"StateMutationInGetter",permalink:"/tools/misti/docs/0.8/detectors/StateMutationInGetter"},next:{title:"SuboptimalCellOperation",permalink:"/tools/misti/docs/0.8/detectors/SuboptimalCellOperation"}},a={},l=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"stringreceiversoverlap",children:"StringReceiversOverlap"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Severity"}),": High | ",(0,n.jsx)(t.strong,{children:"Category"}),": Security"]}),"\n",(0,n.jsx)(t.p,{children:"A detector that finds overlapping messages between general string receivers and string receivers."}),"\n",(0,n.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,n.jsx)(t.p,{children:"Constant string receivers and general string receivers can have overlapping messages\nin which case the constant string receiver always takes precedence."}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:'contract Test {\n  receive("foobar") { throw(1042) }\n  receive(msg: String) {\n    if (msg == "foobar") { throw(1043)  } // Bad: Dead code\n  }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Use instead:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:'contract Test {\n  receive("foobar") { throw(1042) }\n  receive(msg: String) {}\n}\n'})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>c});var n=r(6540);const i={},s=n.createContext(i);function o(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);