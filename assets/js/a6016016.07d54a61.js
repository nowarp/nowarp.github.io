"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[1132],{4510:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>a});var r=t(4848),s=t(8453);const o={},c="PreferSenderFunction",i={id:"detectors/PreferSenderFunction",title:"PreferSenderFunction",description:"Severity Optimization",source:"@site/docs/detectors/PreferSenderFunction.md",sourceDirName:"detectors",slug:"/detectors/PreferSenderFunction",permalink:"/tools/misti/docs/next/detectors/PreferSenderFunction",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/docs/detectors/PreferSenderFunction.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"PreferGlobalFunction",permalink:"/tools/misti/docs/next/detectors/PreferGlobalFunction"},next:{title:"PreferredStdlibApi",permalink:"/tools/misti/docs/next/detectors/PreferredStdlibApi"}},d={},a=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"prefersenderfunction",children:"PreferSenderFunction"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Severity"}),": Low | ",(0,r.jsx)(n.strong,{children:"Category"}),": Optimization"]}),"\n",(0,r.jsxs)(n.p,{children:["A detector that finds ",(0,r.jsx)(n.code,{children:"context().sender"})," calls that could be replaced with\nmore gas-effective ",(0,r.jsx)(n.code,{children:"sender()"})," call."]}),"\n",(0,r.jsx)(n.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,r.jsxs)(n.p,{children:["You can obtain the address of the message sender using either the ",(0,r.jsx)(n.code,{children:"Context"}),"\nstruct or the ",(0,r.jsx)(n.code,{children:"sender"})," function. If you only need the address and no\nadditional context on the incoming message , you should prefer less\ngas-expensive ",(0,r.jsx)(n.code,{children:"sender()"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["See: ",(0,r.jsx)(n.a,{href:"https://docs.tact-lang.org/book/gas-best-practices/#use-sender-over-contextsender",children:"https://docs.tact-lang.org/book/gas-best-practices/#use-sender-over-contextsender"})]}),"\n",(0,r.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tact",children:'let ctx = context(); // Bad: only .sender is accessed\nmessage(MessageParameters{\n  to: ctx.sender,\n  value: ton("0.05"),\n});\n'})}),"\n",(0,r.jsx)(n.p,{children:"Use instead:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tact",children:'message(MessageParameters{\n  to: sender(),\n  value: ton("0.05"),\n});\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>i});var r=t(6540);const s={},o=r.createContext(s);function c(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);