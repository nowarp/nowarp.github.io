"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[5140],{5495:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var n=s(4848),i=s(8453);const o={},d="DumpIsUsed",r={id:"detectors/DumpIsUsed",title:"DumpIsUsed",description:"An optional detector that highlights all the dump debug prints.",source:"@site/versioned_docs/version-0.7/detectors/DumpIsUsed.md",sourceDirName:"detectors",slug:"/detectors/DumpIsUsed",permalink:"/tools/misti/docs/0.7/detectors/DumpIsUsed",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.7/detectors/DumpIsUsed.md",tags:[],version:"0.7",frontMatter:{},sidebar:"sidebar",previous:{title:"DivideBeforeMultiply",permalink:"/tools/misti/docs/0.7/detectors/DivideBeforeMultiply"},next:{title:"DuplicatedCondition",permalink:"/tools/misti/docs/0.7/detectors/DuplicatedCondition"}},c={},a=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"dumpisused",children:"DumpIsUsed"}),"\n",(0,n.jsxs)(t.p,{children:["An optional detector that highlights all the ",(0,n.jsx)(t.code,{children:"dump"})," debug prints."]}),"\n",(0,n.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"dump"})," function is a debug print that shouldn't be in the final code.\nEven though the compiler removes it in production, its presence suggests the\ndeveloper was debugging something. This can flag areas where issues might exist,\nso auditors should take a closer look at these parts of the code."]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:"fun test(): Int {\n  // ... other computations\n  let combined: Int = (RANDOM_SEED >> half_shift) &\n                      (MAGIC_CONSTANT << DIVIDE_BY_TWO) ^ shift_mask;\n  dump(combined); // Suspicious: Highlighted by the detector\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"Use instead:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:"fun test(): Int {\n  // ... other computations\n  let combined: Int = this.seed ^ shift_mask\n  // OK: The code was reviewed and simplified; `dump` was removed\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>d,x:()=>r});var n=s(6540);const i={},o=n.createContext(i);function d(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);