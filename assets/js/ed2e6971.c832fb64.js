"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[8300],{8315:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=n(4848),i=n(8453);const o={},r="UnusedOptional",a={id:"detectors/UnusedOptional",title:"UnusedOptional",description:"Severity Optimization",source:"@site/docs/detectors/UnusedOptional.md",sourceDirName:"detectors",slug:"/detectors/UnusedOptional",permalink:"/tools/misti/docs/next/detectors/UnusedOptional",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/docs/detectors/UnusedOptional.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"UnusedMethodArgument",permalink:"/tools/misti/docs/next/detectors/UnusedMethodArgument"},next:{title:"ZeroAddress",permalink:"/tools/misti/docs/next/detectors/ZeroAddress"}},d={},l=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2}];function c(e){const t={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"unusedoptional",children:"UnusedOptional"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Severity"}),": Low | ",(0,s.jsx)(t.strong,{children:"Category"}),": Optimization"]}),"\n",(0,s.jsx)(t.p,{children:"A detector variables and fields with unused optional modifier."}),"\n",(0,s.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.code,{children:"Optional"})," is a nullable value that has a special ",(0,s.jsx)(t.code,{children:"null"})," value indicating the absence\nof a value. If a developer creates an optional variable or field, he should leverage\nits functionality by accessing the ",(0,s.jsx)(t.code,{children:"null"})," value somewhere in his code. Otherwise,\nthe optional type should be removed to simplify and optimize the code."]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tact",children:"contract Test {\n  a: Int?; // Bad: null value is never accessed\n  init() { self.a = 42; }\n  get fun getA(): Int { return self.a!!; }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Use instead:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tact",children:"contract Test {\n  a: Int = 42; // OK: Removed optional\n  get fun getA(): Int { return self.a; }\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var s=n(6540);const i={},o=s.createContext(i);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);