"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[5792],{5050:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>d});var n=i(4848),s=i(8453);const o={},c="ImplicitOpcode",r={id:"detectors/ImplicitOpcode",title:"ImplicitOpcode",description:"Severity Best Practices",source:"@site/versioned_docs/version-0.8/detectors/ImplicitOpcode.md",sourceDirName:"detectors",slug:"/detectors/ImplicitOpcode",permalink:"/tools/misti/docs/0.8/detectors/ImplicitOpcode",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.8/detectors/ImplicitOpcode.md",tags:[],version:"0.8",frontMatter:{},sidebar:"sidebar",previous:{title:"FieldDoubleInit",permalink:"/tools/misti/docs/0.8/detectors/FieldDoubleInit"},next:{title:"InheritedStateMutation",permalink:"/tools/misti/docs/0.8/detectors/InheritedStateMutation"}},a={},d=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"implicitopcode",children:"ImplicitOpcode"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Severity"}),": Info | ",(0,n.jsx)(t.strong,{children:"Category"}),": Best Practices"]}),"\n",(0,n.jsx)(t.p,{children:"An optional detector that highlights messages with implicitly defined opcode."}),"\n",(0,n.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,n.jsx)(t.p,{children:"Tact automatically generates these unique IDs (opcodes) for every received\nmessage, but developers can specify a message opcode explicitly. This enables\nhandling of specific opcodes in the receiver explicitly, which may be\nconvenient when interacting with FunC contracts."}),"\n",(0,n.jsx)(t.p,{children:"See:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.tact-lang.org/book/structs-and-messages/#message-opcodes",children:"https://docs.tact-lang.org/book/structs-and-messages/#message-opcodes"})}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:"message TokenNotification {\n  forwardPayload: Slice as remaining;\n}\n"})}),"\n",(0,n.jsx)(t.p,{children:"Use instead:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:"message(0x7362d09c) TokenNotification {\n  forwardPayload: Slice as remaining;\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>c,x:()=>r});var n=i(6540);const s={},o=n.createContext(s);function c(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);