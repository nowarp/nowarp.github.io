"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[4121],{5593:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var s=n(4848),r=n(8453);const i={},a="UnusedMethodArgument",d={id:"detectors/UnusedMethodArgument",title:"UnusedMethodArgument",description:"Severity Optimization",source:"@site/docs/detectors/UnusedMethodArgument.md",sourceDirName:"detectors",slug:"/detectors/UnusedMethodArgument",permalink:"/tools/misti/docs/next/detectors/UnusedMethodArgument",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/docs/detectors/UnusedMethodArgument.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"UnusedExpressionResult",permalink:"/tools/misti/docs/next/detectors/UnusedExpressionResult"},next:{title:"UnusedOptional",permalink:"/tools/misti/docs/next/detectors/UnusedOptional"}},o={},c=[{value:"Why is this bad?",id:"why-is-this-bad",level:2},{value:"What it checks",id:"what-it-checks",level:2},{value:"Example",id:"example",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"unusedmethodargument",children:"UnusedMethodArgument"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Severity"}),": Low | ",(0,s.jsx)(t.strong,{children:"Category"}),": Optimization"]}),"\n",(0,s.jsx)(t.p,{children:"Detects method calls where an argument is always the same constant or contract field,\nsuggesting removal of the redundant parameter for gas optimization."}),"\n",(0,s.jsx)(t.h2,{id:"why-is-this-bad",children:"Why is this bad?"}),"\n",(0,s.jsxs)(t.p,{children:["Passing the same value every damn time wastes gas and clutters the code.\nIf an argument is always ",(0,s.jsx)(t.code,{children:"self.a"})," or a literal like ",(0,s.jsx)(t.code,{children:"42"}),", just hardcode it inside the method."]}),"\n",(0,s.jsx)(t.h2,{id:"what-it-checks",children:"What it checks"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["Arguments that are always the same contract field (",(0,s.jsx)(t.code,{children:"self.x"}),", ",(0,s.jsx)(t.code,{children:"self.y"}),", etc.)."]}),"\n",(0,s.jsxs)(t.li,{children:["Arguments that are always the same literal (e.g., ",(0,s.jsx)(t.code,{children:"true"}),", ",(0,s.jsx)(t.code,{children:"42"}),", ",(0,s.jsx)(t.code,{children:'"fixed_string"'}),")."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tact",children:'contract C {\n  a: Int = 0;\n  receive() { self.nextA(self.a); }\n  receive("whatever") { self.nextA(self.a); }\n  fun nextA(a: Int): Int {\n    return a + 1; // Bad: `self.a` is always passed, so the parameter is useless\n  }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"Use instead:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tact",children:'contract C {\n  a: Int = 0;\n  receive() { self.nextA(); }\n  receive("whatever") { self.nextA(); }\n  fun nextA(): Int {\n    return self.a + 1; // OK: Use `self.a` directly\n  }\n}\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>d});var s=n(6540);const r={},i=s.createContext(r);function a(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);