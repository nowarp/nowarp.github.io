"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[782],{6650:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>a});var n=o(4848),s=o(8453);const i={},r="ExitCodeUsage",d={id:"detectors/ExitCodeUsage",title:"ExitCodeUsage",description:"A detector that identifies improper use of exit codes outside the developer-allowed range.",source:"@site/versioned_docs/version-0.7/detectors/ExitCodeUsage.md",sourceDirName:"detectors",slug:"/detectors/ExitCodeUsage",permalink:"/tools/misti/docs/0.7/detectors/ExitCodeUsage",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.7/detectors/ExitCodeUsage.md",tags:[],version:"0.7",frontMatter:{},sidebar:"sidebar",previous:{title:"EtaLikeSimplifications",permalink:"/tools/misti/docs/0.7/detectors/EtaLikeSimplifications"},next:{title:"FalseCondition",permalink:"/tools/misti/docs/0.7/detectors/FalseCondition"}},c={},a=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"exitcodeusage",children:"ExitCodeUsage"}),"\n",(0,n.jsx)(t.p,{children:"A detector that identifies improper use of exit codes outside the developer-allowed range."}),"\n",(0,n.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,n.jsx)(t.p,{children:"In the TON blockchain, exit codes are divided into specific ranges: 0 to 127\nare reserved for the TVM or FunC, and 128 to 255 are reserved for Tact. This\nstructure leaves the range from 256 to 65535 for developers to define custom\nexit codes."}),"\n",(0,n.jsx)(t.p,{children:"When exit codes are defined outside this allowed range, it may lead to\nconflicts with existing reserved codes, causing unintended behavior or\nerrors in the contract."}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:'contract Foo {\n    receive("foobar") {\n        // Bad: exit code defined in the reserved range for Tact\n        let code: Int = 128;\n        nativeThrowUnless(code, sender() == self.owner);\n    }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"Use instead:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:'contract Foo {\n    receive("foobar") {\n        // OK: using exit code from the allowed range\n        let code: Int = 256;\n        nativeThrowUnless(code, sender() == self.owner);\n    }\n}\n'})}),"\n",(0,n.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.tact-lang.org/book/exit-codes",children:"Exit Codes | Tact Docs"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>d});var n=o(6540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);