"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[1345],{8322:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>f});var t=i(4848),r=i(8453);const s={},a="Souffl\xe9 Integration Guide",o={id:"hacking/souffle",title:"Souffl\xe9 Integration Guide",description:"What is Souffl\xe9?",source:"@site/versioned_docs/version-0.9/hacking/souffle.md",sourceDirName:"hacking",slug:"/hacking/souffle",permalink:"/tools/misti/docs/hacking/souffle",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.9/hacking/souffle.md",tags:[],version:"0.9",frontMatter:{},sidebar:"sidebar",previous:{title:"Design Overview",permalink:"/tools/misti/docs/hacking/design"},next:{title:"Contributing",permalink:"/tools/misti/docs/hacking/contributing"}},l={},f=[{value:"What is Souffl\xe9?",id:"what-is-souffl\xe9",level:2},{value:"Benefits of Using Souffl\xe9 for Static Analysis",id:"benefits-of-using-souffl\xe9-for-static-analysis",level:2},{value:"Souffl\xe9 Integration in Misti",id:"souffl\xe9-integration-in-misti",level:2},{value:"Creating Souffl\xe9 Programs",id:"creating-souffl\xe9-programs",level:3},{value:"Generating Facts and Executing Souffl\xe9",id:"generating-facts-and-executing-souffl\xe9",level:3},{value:"Learning from Existing Code",id:"learning-from-existing-code",level:3},{value:"Further Reading",id:"further-reading",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"souffl\xe9-integration-guide",children:"Souffl\xe9 Integration Guide"}),"\n",(0,t.jsx)(n.h2,{id:"what-is-souffl\xe9",children:"What is Souffl\xe9?"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"https://souffle-lang.github.io",children:"Souffl\xe9"})," is a highly efficient Datalog solver designed specifically for program analysis. It offers native parallel execution, making it incredibly fast and suitable for handling complex static analysis tasks. By leveraging Souffl\xe9, Misti can perform deep and scalable analyses of smart contracts."]}),"\n",(0,t.jsx)(n.h2,{id:"benefits-of-using-souffl\xe9-for-static-analysis",children:"Benefits of Using Souffl\xe9 for Static Analysis"}),"\n",(0,t.jsx)(n.p,{children:"Souffl\xe9 allows to express static analysis problems declaratively, making it easier to define and solve complex queries over the code's intermediate representation (IR). In some cases writing a Souffl\xe9 program might be more straightforward then implementing a complex transfer function in for a classic monotone framework."}),"\n",(0,t.jsx)(n.h2,{id:"souffl\xe9-integration-in-misti",children:"Souffl\xe9 Integration in Misti"}),"\n",(0,t.jsxs)(n.p,{children:["The API for interacting with Souffl\xe9 in Misti is implemented in the ",(0,t.jsx)(n.a,{href:"https://github.com/nowarp/souffle.js",children:"Souffle.js library"}),". See the ",(0,t.jsx)(n.a,{href:"https://nowarp.io/api/souffle-js/",children:"Souffle.js API reference"})," for more detailed information."]}),"\n",(0,t.jsx)(n.h3,{id:"creating-souffl\xe9-programs",children:"Creating Souffl\xe9 Programs"}),"\n",(0,t.jsx)(n.p,{children:'To create a Souffl\xe9 program within Misti, you need to declare relations, rules and generate facts based on the IR. Here is an example from the built-in "readonly variables" detector:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'addDecls(ctx: Context<SrcInfo>) {\n  ctx.add(\n    Relation.from(\n      "varDecl",\n      [\n        ["var", FactType.Symbol],\n        ["func", FactType.Symbol],\n      ],\n      undefined,\n    ),\n  );\n  // other declarations\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'addRules(ctx: Context<SrcInfo>) {\n    // readOnly(var, func) :-\n    //     varDecl(var, func),\n    //     !varAssign(var, func),\n    //     !varUse(var, func).\n    ctx.add(\n      Rule.from(\n        [makeAtom("readOnly", ["var", "func"])],\n        makeRuleBody(makeAtom("varDecl", ["var", "func"])),\n        makeRuleBody(makeAtom("varAssign", ["var", "func"]), {\n          negated: true,\n        }),\n        makeRuleBody(makeAtom("varUse", ["var", "func"]), { negated: true }),\n      ),\n    );\n  }\n'})}),"\n",(0,t.jsx)(n.h3,{id:"generating-facts-and-executing-souffl\xe9",children:"Generating Facts and Executing Souffl\xe9"}),"\n",(0,t.jsx)(n.p,{children:"After declaring the necessary relations, you need to iterate over the IR to generate facts for these declarations. Then, use the built-in Souffl\xe9 executor to run the analysis:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"const executor = ctx.config.soufflePath\n  ? new Executor<SrcInfo>({\n      inputDir: ctx.config.soufflePath,\n      outputDir: ctx.config.soufflePath,\n    })\n  : new Executor<SrcInfo>();\n\nconst result = executor.executeSync(program);\n\nif (!result.success) {\n  throw new Error(\n    `Error executing Souffl\xe9 for ${this.id}:\\n${result.stderr}`,\n  );\n}\n\nconst warnings = Array.from(result.results.entries.values()).map((fact) => {\n  // raise warnings\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"learning-from-existing-code",children:"Learning from Existing Code"}),"\n",(0,t.jsx)(n.p,{children:"We recommend studying the existing codebase, as it is well-documented and provides a comprehensive overview of integrating Souffl\xe9 with Misti. This will help you understand the intricacies of generating IR and executing Souffl\xe9 programs effectively."}),"\n",(0,t.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,t.jsxs)(n.p,{children:["For a deeper understanding of static analysis using Souffl\xe9, refer to the textbook ",(0,t.jsx)(n.em,{children:(0,t.jsx)(n.a,{href:"https://arxiv.org/pdf/2012.10086",children:"Program Analysis: An Appetizer"})})," by Flemming Nielson and Hanne Riis Nielson. It discusses Souffl\xe9-based analysis in greater detail and is an excellent resource for both beginners and experienced developers in the field."]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var t=i(6540);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);