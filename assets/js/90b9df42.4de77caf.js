"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[4751],{8355:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>l});var i=t(4848),r=t(8453);const s={},o="DumpImports",d={id:"tools/DumpImports",title:"DumpImports",description:"Misti provides a feature to dump the Import Graph of your Tact code in JSON, DOT, and Mermaid formats. This tool helps you understand the dependencies between different files and modules in your project, including how contracts import each other and use the standard library.",source:"@site/versioned_docs/version-0.8/tools/DumpImports.md",sourceDirName:"tools",slug:"/tools/DumpImports",permalink:"/tools/misti/docs/0.8/tools/DumpImports",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.8/tools/DumpImports.md",tags:[],version:"0.8",frontMatter:{},sidebar:"sidebar",previous:{title:"DumpConfig",permalink:"/tools/misti/docs/0.8/tools/DumpConfig"},next:{title:"Design Overview",permalink:"/tools/misti/docs/0.8/hacking/design"}},a={},l=[{value:"Usage",id:"usage",level:2},{value:"Working with Mermaid and Graphviz",id:"working-with-mermaid-and-graphviz",level:2},{value:"Understanding the Dumps",id:"understanding-the-dumps",level:2},{value:"Including Standard Library Imports",id:"including-standard-library-imports",level:2},{value:"Example",id:"example",level:2},{value:"Interpreting the Import Graph",id:"interpreting-the-import-graph",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"dumpimports",children:"DumpImports"}),"\n",(0,i.jsxs)(n.p,{children:["Misti provides a feature to dump the ",(0,i.jsx)(n.strong,{children:"Import Graph"})," of your Tact code in JSON, DOT, and Mermaid formats. This tool helps you understand the dependencies between different files and modules in your project, including how contracts import each other and use the standard library."]}),"\n",(0,i.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.p,{children:"To dump the Import Graph in Mermaid format, use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'misti -t "DumpImports:format=mmd" <TACT_CONFIG_PATH|TACT_FILE_PATH>\n'})}),"\n",(0,i.jsx)(n.p,{children:"To dump the Import Graph in Graphviz DOT format, use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'misti -t "DumpImports:format=dot" <TACT_CONFIG_PATH|TACT_FILE_PATH>\n'})}),"\n",(0,i.jsx)(n.p,{children:"To dump the Import Graph in JSON format, use the following command:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'misti -t "DumpImports:format=json" <TACT_CONFIG_PATH|TACT_FILE_PATH>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can also include Tact standard library imports in the dump by adding ",(0,i.jsx)(n.code,{children:"dumpStdlib=true"})," to the ",(0,i.jsx)(n.code,{children:"DumpImports"})," options:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'misti -t "DumpImports:format=dot,dumpStdlib=true" <TACT_CONFIG_PATH|TACT_FILE_PATH>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"working-with-mermaid-and-graphviz",children:"Working with Mermaid and Graphviz"}),"\n",(0,i.jsxs)(n.p,{children:["For guidance on how to work with Mermaid diagrams, Graphviz DOT files, and viewing them in Visual Studio Code, please refer to the ",(0,i.jsx)(n.a,{href:"/tools/misti/docs/0.8/tools/DumpCfg#working-with-mermaid",children:"DumpCfg documentation"})," and the ",(0,i.jsx)(n.a,{href:"/tools/misti/docs/0.8/tools/DumpCfg#working-with-graphviz",children:"Graphviz section"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"understanding-the-dumps",children:"Understanding the Dumps"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"JSON Dumps"}),": Provide a detailed representation of the Import Graph in JSON format, including nodes and edges with their properties. Useful for programmatic analysis or custom tooling."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"DOT Dumps"}),": Offer a visual representation of the project's import dependencies. Useful for understanding how files and contracts depend on each other."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mermaid Dumps"}),": Similar to DOT dumps but using Mermaid syntax, which can be easier to work with in certain environments, especially when using markdown files or online editors."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By utilizing these tools, developers can gain deeper insights into the dependency structure of their Tact projects, facilitating better project organization, dependency management, and code optimization."}),"\n",(0,i.jsx)(n.h2,{id:"including-standard-library-imports",children:"Including Standard Library Imports"}),"\n",(0,i.jsxs)(n.p,{children:["By default, the Import Graph excludes imports from the standard library. If you want to include standard library imports in your graph, add ",(0,i.jsx)(n.code,{children:"dumpStdlib=true"})," to the command:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'misti -t "DumpImports:format=mmd,dumpStdlib=true" contracts/main.tact\n'})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"Consider a project with the following structure:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"main.tact"})}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tact",children:'import "./constants.tact";\nimport "./messages.tact";\nimport "@stdlib/ownable";\ncontract C{}\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"constants.tact"})}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tact",children:"const SOMETHING: Int = 123;\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"messages.tact"})}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tact",children:'import "./constants.tact";\nmessage Msg { a: Bool }\n'})}),"\n",(0,i.jsx)(n.p,{children:"To dump the Import Graph in Mermaid format, run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'misti -t "DumpImports:format=mmd:dumpStdlib=true" contracts/main.tact\n'})}),"\n",(0,i.jsx)(n.p,{children:"The output will look like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-mermaid",children:'graph TD\n    node_1["main"]:::contractNode\n    node_2["constants"]\n    node_3["messages"]\n    node_4["@stdlib/ownable.tact"]:::stdlibNode\n    node_1 --\x3e node_2\n    node_3 --\x3e node_2\n    node_1 --\x3e node_3\n    node_1 --\x3e node_4\n    classDef contractNode fill:#90EE90,stroke:#333,stroke-width:2px;\n    classDef stdlibNode fill:#FFFF80,stroke:#333,stroke-width:2px;\n'})}),"\n",(0,i.jsx)(n.p,{children:"Which will be rendered as:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Mermaid Output",src:t(2479).A+"",width:"656",height:"414"})}),"\n",(0,i.jsx)(n.p,{children:"In this diagram:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nodes"})," representing files that contain contracts are filled with green."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edges"})," represent import relationships between files."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You can paste this Mermaid code into the Mermaid Live Editor or view it directly in VS Code with the appropriate extension."}),"\n",(0,i.jsx)(n.h2,{id:"interpreting-the-import-graph",children:"Interpreting the Import Graph"}),"\n",(0,i.jsx)(n.p,{children:"The Import Graph shows how files in your project are interconnected through import statements. Each node represents a file, and each edge represents an import from one file to another."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Nodes"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Files containing contracts are highlighted (green in the examples)."}),"\n",(0,i.jsx)(n.li,{children:"Standard library files are highlighted differently (yellow) when included."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Edges"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Directed edges show the import relationship (",(0,i.jsx)(n.code,{children:"A --\x3e B"})," means ",(0,i.jsx)(n.code,{children:"A"})," imports ",(0,i.jsx)(n.code,{children:"B"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Understanding the Import Graph can help you:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Identify unnecessary dependencies."}),"\n",(0,i.jsx)(n.li,{children:"Visualize the structure of your project."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["By utilizing the ",(0,i.jsx)(n.code,{children:"DumpImports"})," tool, developers can gain deeper insights into the dependency structure of their Tact projects, facilitating better project organization, dependency management, and code optimization."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},2479:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/dump-imports-mmd-455299aa0e63b065a70b166ab0597814.png"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);