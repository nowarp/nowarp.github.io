"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[9502],{2668:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(4848),o=n(8453);const s={},c="PreferGlobalFunction",i={id:"detectors/PreferGlobalFunction",title:"PreferGlobalFunction",description:"Severity Optimization",source:"@site/docs/detectors/PreferGlobalFunction.md",sourceDirName:"detectors",slug:"/detectors/PreferGlobalFunction",permalink:"/tools/misti/docs/next/detectors/PreferGlobalFunction",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/docs/detectors/PreferGlobalFunction.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"PreferBinaryReceiver",permalink:"/tools/misti/docs/next/detectors/PreferBinaryReceiver"},next:{title:"PreferSenderFunction",permalink:"/tools/misti/docs/next/detectors/PreferSenderFunction"}},a={},l=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"preferglobalfunction",children:"PreferGlobalFunction"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Severity"}),": Low | ",(0,r.jsx)(t.strong,{children:"Category"}),": Optimization"]}),"\n",(0,r.jsx)(t.p,{children:"Detects contract methods that do not access internal state and suggests replacing them with global functions."}),"\n",(0,r.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Gas inefficiency"}),": Contract method calls (",(0,r.jsx)(t.code,{children:"self.func()"}),") cost more gas than global function calls (",(0,r.jsx)(t.code,{children:"func()"}),") due to unnecessary ",(0,r.jsx)(t.code,{children:"self"})," context resolution."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Cleaner code"}),": Global functions better represent stateless logic, making intent clearer."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["See: ",(0,r.jsx)(t.a,{href:"https://docs.tact-lang.org/book/gas-best-practices/#avoid-internal-contract-functions",children:"https://docs.tact-lang.org/book/gas-best-practices/#avoid-internal-contract-functions"})]}),"\n",(0,r.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tact",children:"contract Math {\n  // Bad: `add()` doesn't use `self`\n  fun add(a: Int, b: Int): Int {\n    return a + b;\n  }\n  // other methods\n}\n\n"})}),"\n",(0,r.jsx)(t.p,{children:"Use instead:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tact",children:"// Good: Replace with a global function\nfun add(a: Int, b: Int): Int {\n  return a + b;\n}\ncontract Math {\n  // other methods\n}\n"})})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>c,x:()=>i});var r=n(6540);const o={},s=r.createContext(o);function c(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);