"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[2079],{7073:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var n=s(4848),o=s(8453);const r={},i="DumpAst",d={id:"tools/DumpAst",title:"DumpAst",description:"The DumpAst tool in Misti enables users to output the Abstract Syntax Tree (AST) of project modules in JSON format. This is particularly useful when writing custom detectors, as it helps understand the structure and components of the code.",source:"@site/versioned_docs/version-0.8/tools/DumpAst.md",sourceDirName:"tools",slug:"/tools/DumpAst",permalink:"/tools/misti/docs/0.8/tools/DumpAst",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.8/tools/DumpAst.md",tags:[],version:"0.8",frontMatter:{},sidebar:"sidebar",previous:{title:"Overview",permalink:"/tools/misti/docs/0.8/tools"},next:{title:"DumpCallGraph",permalink:"/tools/misti/docs/0.8/tools/DumpCallGraph"}},a={},c=[{value:"Usage",id:"usage",level:2},{value:"Understanding the Dumps",id:"understanding-the-dumps",level:2}];function l(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"dumpast",children:"DumpAst"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"DumpAst"})," tool in Misti enables users to output the ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Abstract_syntax_tree",children:"Abstract Syntax Tree (AST)"})," of project modules in JSON format. This is particularly useful when writing custom detectors, as it helps understand the structure and components of the code."]}),"\n",(0,n.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,n.jsx)(t.p,{children:"To dump the AST in JSON format, use the following command:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'misti -t "DumpAst" <TACT_CONFIG_PATH|TACT_FILE_PATH>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["If you wish to include the standard library in the dump, set ",(0,n.jsx)(t.code,{children:"dumpStdlib"})," to ",(0,n.jsx)(t.code,{children:"true"}),":"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:'misti -t "DumpAst:dumpStdlib=true" <TACT_CONFIG_PATH|TACT_FILE_PATH>\n'})}),"\n",(0,n.jsx)(t.h2,{id:"understanding-the-dumps",children:"Understanding the Dumps"}),"\n",(0,n.jsxs)(t.p,{children:["The AST provides a detailed breakdown of code components, offering insights into its structure. This is essential when creating or debugging ",(0,n.jsx)(t.a,{href:"/tools/misti/docs/0.8/hacking/custom-detector",children:"custom detectors"}),", as it allows a deeper understanding of how code is represented internally by the analyzer."]}),"\n",(0,n.jsxs)(t.p,{children:["By leveraging the ",(0,n.jsx)(t.code,{children:"DumpAst"})," tool, developers can more effectively navigate and interpret the project's syntax, supporting the development of accurate and efficient detectors."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>d});var n=s(6540);const o={},r=n.createContext(o);function i(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);