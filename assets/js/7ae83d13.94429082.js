"use strict";(self.webpackChunknowarp_github_io=self.webpackChunknowarp_github_io||[]).push([[4753],{3567:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=s(4848),r=s(8453);const o={},i="CellBounds",l={id:"detectors/CellBounds",title:"CellBounds",description:"Severity Security",source:"@site/versioned_docs/version-0.9/detectors/CellBounds.md",sourceDirName:"detectors",slug:"/detectors/CellBounds",permalink:"/tools/misti/docs/detectors/CellBounds",draft:!1,unlisted:!1,editUrl:"https://github.com/nowarp/nowarp.github.io/tree/master/versioned_docs/version-0.9/detectors/CellBounds.md",tags:[],version:"0.9",frontMatter:{},sidebar:"sidebar",previous:{title:"BranchDuplicate",permalink:"/tools/misti/docs/detectors/BranchDuplicate"},next:{title:"ConstantAddress",permalink:"/tools/misti/docs/detectors/ConstantAddress"}},c={},d=[{value:"Why is it bad?",id:"why-is-it-bad",level:2},{value:"Example",id:"example",level:2},{value:"Resources",id:"resources",level:2}];function a(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"cellbounds",children:"CellBounds"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.strong,{children:"Severity"}),": Critical | ",(0,n.jsx)(t.strong,{children:"Category"}),": Security"]}),"\n",(0,n.jsx)(t.p,{children:"A detector that identifies cell overflow and underflow problems."}),"\n",(0,n.jsx)(t.h2,{id:"why-is-it-bad",children:"Why is it bad?"}),"\n",(0,n.jsx)(t.p,{children:"Cell overflow and underflow are issues specific to the TON blockchain. TON\nstores data in cells, which are low-level data structures used for serialization\nand deserialization."}),"\n",(0,n.jsxs)(t.p,{children:["The overflow issue occurs when the user attempts to store more data in a cell\nthan it supports. The current limitation is 1023 bits and 4 references to other\ncells. When these limits are exceeded, the contract throws an error with the\nexit code ",(0,n.jsx)(t.code,{children:"8"})," during the compute phase."]}),"\n",(0,n.jsxs)(t.p,{children:["The underflow issue occurs when the user attempts to get more data from a\nstructure than it supports. cells. When it happens, the contract throws an\nerror with the exit code ",(0,n.jsx)(t.code,{children:"9"})," during the compute phase."]}),"\n",(0,n.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:"// Bad: storeRef is used more than 4 times\nbeginCell()\n  .storeRef(...)\n  .storeAddress(myAddress())\n  .storeRef(...)\n  .storeRef(...)\n  .storeRef(...)\n  .storeRef(...)\n  .endCell()\n"})}),"\n",(0,n.jsx)(t.p,{children:"Use instead:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-tact",children:"// OK: Fixed after the analyzer highlighted it\nbeginCell()\n  .storeRef(...)\n  .storeAddress(myAddress())\n  .storeRef(...)\n  .storeRef(...)\n  .storeRef(...)\n  .endCell()\n"})}),"\n",(0,n.jsx)(t.h2,{id:"resources",children:"Resources"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.ton.org/develop/data-formats/cell-boc",children:"Cell & Bag of Cells (BoC) | TON Docs"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.ton.org/learn/tvm-instructions/tvm-exit-codes",children:"TVM Exit codes | TON Docs"})}),"\n",(0,n.jsx)(t.li,{children:(0,n.jsx)(t.a,{href:"https://docs.tact-lang.org/ref/core-cells/",children:"Cells, Builders and Slices | Tact Docs"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>l});var n=s(6540);const r={},o=n.createContext(r);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);